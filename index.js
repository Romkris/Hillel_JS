//основні домашкі по JS

//HM 1: Вам необхідно вказати, яким буде результат операції та описати крок за кроком у вигляді коментарів, як відбувається перетворення в кожному прикладі:

'number' + 3 + 3 
//  кроки 1: 'number' + 3 + 3
//  - + це оператор для об'єднання рядків;
//  - 'number' - це строка;
//  - 3 - це число, але в цьому випадку JavaScript перетворює число на рядок для конкатенації;
//  Результат: 'number3'
//  
//  кроки 2: 'number3' + 3
// - 'number3' - є строкою;
// - 3 - це число, але знову буде перетворювати на рядок під час конкатенації;
//  Результат: 'number33'

null + 3
// крок 1: 
// null - спеціальне значення, яке вказує на відсутність значення або об'єкта. В цьому випадку JS перетворює "null" в число 0 при додавані до числа;
// + оператор додавання;
// 3 - число;
// крок 2:
// відбувається додавання 0 + 3;
// Результат: '3'

5 && "qwerty"
// крок 1:
// 5 - це числовий операнд;
// && - це логічний оператор and;
// "qwerty" - це тип даних string
// крок 2:
// 5 && "qwerty" - при порівнянні JS перетворює на булеві значення
// 5 - це значення буде true;
// "qwerty" - це значення буде true;
//  && - повертає значення "true", якщо обидва операнди істинні;
// Результат: друге "true"

+'40' + +'2' + "hillel";
// крок 1: 
// Унарний знак "+" перед рядком змушує JS перетворювати строку в число
// "40" - стає числом 40
// Так само унарний + перед рядком "2", перетворює цей рядок на число
// "2" - стає числом 2
// Результат: "42hillel";

'10' - 5 === 6;
// крок 1: '10' - 5
// В данноиу випадку при операції строгого порівннян, спочатку йде розрахунок по арифметичному оператору "-", який виконується спочатку 
// При віднімані строки з числом від числа JS перетворює на число '10' - 5
// Результат: 5
// крок 2: 5 === 6
// === (строге порівняння) - оператор, який перевіряє, чи два значення рівні як за значенням, так і за типом.
// 5 - число
// 6 - число
// значення 5 не дорівнює значенню 6
// Результат: "false"


true + false
// Крок 1: 
// true/false - це булеві значення
// false - JavaScript перетворює в цифрове значеня "0"
// true - так само перетворюється в цифрове значеня "1"
// Крок 2:
// 1 + 0 = 1
// Результат: 1

'4px' - 3
// Крок 1:
// '4px' - це рядок з числом, для JS це строка
// "-" - арифметичний оператор віднімання
// 3 - число
// Крок 2:
// '4px' - 3 - в цьому випадку JS не зможе перетворити "px" на число при віднімані, тому буде значення NaN, яке вказує що це не число (not a number)
// Результат: NaN;

'4' - 3
// Крок 1:
// "4" - рядок
// 3 - число
// "-" - арефметичний оператор
// Крок 2:
// При відніманні JS перетворює стоку з числом на число
// 4-3
// Результат: 1

'6' + 3 ** 0;
// Крок 1:
// ** - оператор означає піднесення до степення
// 3 ** 0 - 3 до степення з 0 приводить будь-яке число до 1
// "6" - це рядок
// При арефметичній операції додаванні між числом та рядком викликається конкатинація
// Крок 2:
// '6' + 1 = "61"
// Результат: "61" 

12 / '6'
// Крок 1:
// 12 - число
// "6" - рядок
// При операції ділення JS автоматично приведе рядок в якому число до числа 
// Крок 2:
// тому буде звичайна арефметична операція 12 поділити на 6 дорвінює 2
// Результат: 2

'10' + (5 === 6);
// Крок 1: спочатку виконується (5 === 6)
// "===" - оператор строгого порівння
// 5 - число 
// 6 - число 
// 5 не дорівнює 6 - виходить буде "false"
// Крок 2: '10' + false
// "10" - рядок 
// false - булеве значення
// "+" - оператор між рядком та булевим значенням викликає конкатинацію
// false - JS перетворює на рядок
// Крок 3:
// "10" + "false" = "10false"
// Результат: "10false"

null == ''
// Крок 1:
// null - це пусте значення, 
// '' - пустий рядок
// "==" - оператор не строгого порівння
// Крок 2: 
// Порожній рядок '' в JS при порівнянні з null не викликає автоматичне приведення типів
// null == '' повертає false, тому що null і порожній рядок не є рівними за правилами нестрогого порівняння
// Результат: false

3 ** (9 / 3);
// Крок 1:
// 9 - число
// 3 - число
// / - арефметичний оператор ділення
// ** - оператор означає піднесення до степення
// Крок 2: 3 ** (9 / 3)
// Спочатку виконується операція в дужках 
// 9 / 3 = 3
// 3 ** 3 = 3 в 3 степені буде 27 (3*3*3)
// Результат: 27

!!'false' == !!'true'
// Крок 1: 
// !! - подвійне логічне заперечення для преведення до булевого значення
// "false" - рядок
// == -  не строге порівння, не приводить до одного типу даних
// "true" - рядок
// Крок 2: 
// !!'false' - приводить до булевого значення true
// !!'true' - приводить до булевого значення true
// true == true буде true
// Результат: true

0 || '0' && 1

// Крок 1:
// 0 - число
// || - логічний оператор або
// "0" - рядок 
// && - логічні операції і
// 1 - число
// Крок 2:
// 0 - приводиться до значення false
// '0' - приводиться до значення true
// 1 - приводиться до значення true 
// Крок 3:
// 0 || '0' && 1 - в даному випадку послідовність виконання буде з або (&& має вищий пріоритет ніж ||)
// '0' && 1 - якщо хочаб один з операторів хибний, поверне false. Перший хибний (false)
// 0 || false - якщо оператор перший хибний, то поверне другий. Другий хибний (false)
// Результат: false

(+null == false) < 1;

// Крок 1: (+null == false)
// + перед null перетворює null на число
// null стає 0
// 0 == false
// == порівнює 0 і false
// При не строгому порівнянні 0 та false рівні, тому true
// Крок 2: true < 1
// true перетворюється на 1 при порівнянні з числом
// Перевіряємо 1 < 1
//Результат: false.

false && true || true
// Крок 1: false && true
// оператор && виконує логічне "і"
// false && true дає false, оскільки перше значення false
// Крок 2: false || true
// оператор || виконує логічне "або"
// false || true дає true, оскільки друге значення true
//Результат: true

false && (false || true);

// Крок 1: false || true
// Оператор || виконує логічне "або"
// false || true дає true
// Крок 2: false && true
// Оператор && виконує логічне "і"
// false && true дає false, оскільки перше значення false
// Результат: false

(+null == false) < 1 ** 5

// Крок 1: 1 ** 5
// оператор ** виконує піднесення до степеня
// 1 ** 5 означає 1 в п’ятому степені, що дорівнює 1
// Крок 2: +null == false
// +null(приводиться до числа) дає 0, і 0 == false дає true
// Крок 3: true < 1
// true перетворюється на 1 при порівнянні
// Перевіряємо 1 < 1 буде false
// Результат: false